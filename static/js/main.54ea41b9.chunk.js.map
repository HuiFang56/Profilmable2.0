{"version":3,"sources":["components/Header.js","components/MovieSearch.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","title","MovieSearch","handleChange","e","setState","inputValue","target","value","console","log","handleSubmit","preventDefault","state","axios","get","then","response","movieId","data","results","id","movieBf","overview","moviePosterPath","poster_path","dataRender","movieImage","bind","onSubmit","this","onChange","type","src","alt","width","hight","style","backgroundImage","backgroundRepeat","backgroundPosition","height","React","Component","App","selectedMovieid","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"2QAaeA,EATD,SAACC,GACX,OACI,4BAAQC,UAAW,mBAEjB,4BAAKD,EAAME,S,uBC8ENC,E,kDAlFf,WAAYH,GAAO,IAAD,8BACd,cAAMA,IAcVI,aAAe,SAACC,GACZ,EAAKC,SAAS,CACVC,WAAWF,EAAEG,OAAOC,QAExBC,QAAQC,IAAI,gCAnBE,EAsBlBC,aAAe,SAACP,GACZA,EAAEQ,iBACFH,QAAQC,IAAI,WACZD,QAAQC,IAAR,UAAe,EAAKG,MAAMP,aAE1BQ,IAAMC,IAAN,mGAAsG,EAAKF,MAAMP,aAC5GU,MACG,SAAAC,GAAQ,OACJ,EAAKZ,SAAS,CACVa,QAAQD,EAASE,KAAKC,QAAQ,GAAGC,GACjCC,QAAQL,EAASE,KAAKC,QAAQ,GAAGG,cAG3CP,MAAM,SAAAC,GAAQ,OACZH,IAAMC,IAAN,6CAAgD,EAAKF,MAAMK,QAA3D,8CACKF,MACG,SAAAC,GAAQ,OACR,EAAKZ,SAAS,CACVmB,gBAAgBP,EAASE,KAAKM,qBAxCpC,EA8ClBC,WAAa,SAACtB,GACVA,EAAEQ,iBAEFH,QAAQC,IAAI,8BA/CZ,EAAKG,MAAM,CACPP,WAAW,GACXY,QAAQ,OACRI,QAAQ,GACRE,gBAAgB,GAChBG,WAAW,IAEf,EAAKxB,aAAe,EAAKA,aAAayB,KAAlB,gBACpB,EAAKjB,aAAe,EAAKA,aAAaiB,KAAlB,gBACpB,EAAKF,WAAa,EAAKA,WAAWE,KAAhB,gBAXJ,E,qDAsDd,OACI,yBAAK5B,UAAU,wBACX,8CACA,0BAAM6B,SAAUC,KAAKnB,cACjB,4DAC8B,6BAC1B,2BAAOH,MAAOsB,KAAKjB,MAAMP,WAAYyB,SAAUD,KAAK3B,gBAE5D,2BAAO6B,KAAK,SAASxB,MAAM,YAE3B,qDAA2BsB,KAAKjB,MAAMS,SAEtC,yBAAKW,IAAG,0CAAqCH,KAAKjB,MAAMW,iBAAmBU,IAAI,cAAcC,MAAM,QAAQC,MAAM,SACjH,yBAAKC,MAAO,CACRC,gBAAgB,uCAAD,OAAwCR,KAAKjB,MAAMW,gBAAnD,KACfe,iBAAkB,YAClBC,mBAAoB,gBACpBL,MAAM,QACNM,OAAO,UAjBf,+B,GAxDkBC,IAAMC,WC6BjBC,E,kDA3Bb,WAAY7C,GAAO,IAAD,8BAChB,cAAMA,IACDc,MAAQ,CACTgC,gBAAgB,IAHJ,E,qDAUhB,OACE,8BACE,yBAAK7C,UAAU,gBACb,kBAAC,EAAD,CAAQC,MAAM,kBACd,kBAAC,EAAD,Y,GAfQ0C,aCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1C,MAAK,SAAA2C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrD,QAAQqD,MAAMA,EAAMC,c","file":"static/js/main.54ea41b9.chunk.js","sourcesContent":["import React from 'react';\n\n\n\nconst Header =(props) =>{\n    return(\n        <header className =\"headerComponent\">\n         \n          <h1>{props.title}</h1>\n        </header>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport axios from 'axios';\n\nclass MovieSearch extends React.Component{\nconstructor(props){\n    super(props);\n    this.state={\n        inputValue:'',\n        movieId:'0000',\n        movieBf:[],\n        moviePosterPath:'',\n        movieImage:''\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.dataRender = this.dataRender.bind(this)\n\n}\n\nhandleChange = (e) =>{\n    this.setState({\n        inputValue:e.target.value\n    });\n    console.log(\"Here is handleChange's test\")\n}\n\nhandleSubmit = (e) => {\n    e.preventDefault();\n    console.log(\"We hit!\");\n    console.log(`${this.state.inputValue}`);\n    // fetch data\n    axios.get(`https://api.themoviedb.org/3/search/movie?api_key=4ac5617406e7160eb1ce718f294179fd&query=${this.state.inputValue}`)\n        .then(\n            response => \n                this.setState({\n                    movieId:response.data.results[0].id,\n                    movieBf:response.data.results[0].overview\n\n                })\n        ).then( response =>\n            axios.get(`https://api.themoviedb.org/3/movie/${this.state.movieId}?api_key=4ac5617406e7160eb1ce718f294179fd`)\n                .then(\n                    response =>\n                    this.setState({\n                        moviePosterPath:response.data.poster_path\n                    })\n                )   \n        )\n}\n\ndataRender = (e) =>{\n    e.preventDefault();\n    // console.log(this.state.movieId)\n    console.log(\"Here is dataRender's Data\")\n}\n\nrender(){\n\n    return(\n        <div className='MovieSearchComponent'>\n            <h1>This is a test</h1>\n            <form onSubmit={this.handleSubmit}>\n                <label>\n                    Search a movie down below:<br />\n                    <input value={this.state.inputValue} onChange={this.handleChange}/>\n                </label>\n            <input type=\"submit\" value=\"Submit\" />\n            </form>\n            <h4>Movie Brief in return:{this.state.movieBf}</h4>\n            {/* <h5>https://image.tmdb.org/t/p/w500/{this.state.moviePosterPath}</h5> */}\n            <img src={`https://image.tmdb.org/t/p/w500/${this.state.moviePosterPath}`} alt=\"moviePoster\" width=\"500px\" hight=\"100%\"/>\n            <div style={{\n                backgroundImage:`url(https://image.tmdb.org/t/p/w500/${this.state.moviePosterPath})`,\n                backgroundRepeat: 'no-repeat',\n                backgroundPosition: 'center center',\n                width:'900px',\n                height:'100%',\n            }}>\n            </div>\n            Movie Poster Background\n        </div>\n    );\n    }\n}\n\n\nexport default MovieSearch;","import React, { Component } from 'react';\nimport Header from \"./components/Header\";\nimport MovieSearch from \"./components/MovieSearch\";\n\nclass App extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n        selectedMovieid:\"\",\n    }\n  } \n\n\n  render(){\n    \n    return(\n      <main>\n        <div className=\"appcomponent\">\n          <Header title=\"ProFilmable 2\"/>\n          <MovieSearch />\n          \n        </div>\n        \n      </main>\n      \n    )\n  }\n}\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './mysass.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}